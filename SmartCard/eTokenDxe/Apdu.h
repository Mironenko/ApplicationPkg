/** @file

  Copyright (c) 2008 - 2011, Intel Corporation. All rights reserved.<BR>
  This program and the accompanying materials
  are licensed and made available under the terms and conditions of the BSD License
  which accompanies this distribution.  The full text of the license may be found at
  http://opensource.org/licenses/bsd-license.php

  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.

**/

/*
 * Apdu.h
 */

#ifndef __APDU_H__
#define __APDU_H__

#include <Base.h>
#include <Protocol/SmartCard.h>

typedef struct _APDU_OCTET_STRING {
  UINT32 Length;
  UINT32 MaxLength;
  UINT8 *Buffer;
} APDU_OCTET_STRING;

typedef enum _APDU_TYPE {
  APDU_TYPE_NONE = 0x00,
  APDU_TYPE_1 = 0x01,
  APDU_TYPE_2_SHORT = 0x02,
  APDU_TYPE_3_SHORT = 0x03,
  APDU_TYPE_4_SHORT = 0x04,
  APDU_SHORT_MASK = 0x0F,
  APDU_EXT = 0x10,
  APDU_TYPE_2_EXT = APDU_TYPE_2_SHORT | APDU_EXT,
  APDU_TYPE_3_EXT = APDU_TYPE_3_SHORT | APDU_EXT,
  APDU_TYPE_4_EXT = APDU_TYPE_4_SHORT | APDU_EXT,
  APDU_TYPE_2 = 0x22,
  APDU_TYPE_3 = 0x23,
  APDU_TYPE_4 = 0x24
} APDU_TYPE;

typedef enum _APDU_CLASS {
  APDU_CLASS_NORMAL     = 0x00,
  APDU_CLASS_INCOMPLETE = 0x10,
  APDU_CLASS_INIT_RESET = 0x80
} APDU_CLASS;

typedef enum _APDU_COMMAND {
  APDU_RESET                       = 0x00,
  APDU_RESET_ACCESS_RIGHTS         = 0x40,
  APDU_VERIFY_PIN                  = 0x20,
  APDU_GET_RESPONSE                = 0xC0,
  APDU_MANAGE_SECURITY_ENVIRONMENT = 0x22,
  APDU_PERFORM_SECURITY_OPERATION  = 0x2A,
  APDU_DIAGNOSE_CARD               = 0x7E,
  APDU_SELECT_FILE                 = 0xA4,
  APDU_READ_BINARY                 = 0xB0,
  APDU_GET_DATA                    = 0xCA
} APDU_COMMAND;

typedef enum _SELECT_FILE_MODE {
  APDU_SEL_BY_PATH_FROM_MF         = 0x08,
  APDU_SEL_BY_PATH_FROM_CURRENT_DF = 0x09
} SELECT_FILE_MODE;

typedef enum _DATA_BLOCK_TYPE {
  APDU_OWN_DATA_BLOCK      = 0x01,
  APDU_STANDARD_DATA_BLOCK = 0x5F
} DATA_BLOCK_TYPE;

typedef enum _OWN_DATA_BLOCK {
  APDU_ODB_TOKEN_ID                  = 0x81,
  APDU_ODB_TOKEN_SYMBOL_NAME         = 0x82,
  APDU_ODB_TOKEN_SYSTEM_STATUS       = 0x83,
  APDU_ODB_TOKEN_IDENTIFICATION_DATA = 0x89,
  APDU_ODB_TOKEN_FREE_MEMORY         = 0x8A
} OWN_DATA_BLOCK;

typedef enum _MANAGE_SECURITY_ENVIRONMENT_MODE {
  APDU_MSE_STORE   = 0xF2,
  APDU_MSE_RESTORE = 0xF3,
  APDU_MSE_ERASE   = 0xF4,
  APDU_MSE_SET_01  = 0x01,
  APDU_MSE_SET_41  = 0x41,
  APDU_MSE_SET_81  = 0x81,
  APDU_MSE_SET_C1  = 0xC1
} MANAGE_SECURITY_ENVIRONMENT_MODE;

typedef enum _CRT_TAG {
  APDU_CRT_TAG_A4 = 0xA4,
  APDU_CRT_TAG_A6 = 0xA6,
  APDU_CRT_TAG_AA = 0xAA,
  APDU_CRT_TAG_B4 = 0xB4,
  APDU_CRT_TAG_B6 = 0xB6,
  APDU_CRT_TAG_B8 = 0xB8
} CRT_TAG;

typedef enum _TLV_TAG {
  APDU_TLV_TAG_SESSION_KEY_ALG     = 0x80,
  APDU_TLV_TAG_GOSTR3410_PARAM_SET = 0x80,
  APDU_TLV_TAG_SKEY_RSF_REFERENCE  = 0x83,
  APDU_TLV_TAG_AKEY_RSF_REFERENCE  = 0x84,
  APDU_TLV_TAG_SYNCHRO_MSG         = 0x87,
  APDU_TLV_TAG_CIPHER_MODE         = 0x89,
  APDU_TLV_TAG_SBOX_TABLE_INDEX    = 0x8B,
  APDU_TLV_TAG_USAGE_QUALIFIER     = 0x95,
  APDU_TLV_TAG_HASH_DATA           = 0x9A,
  APDU_TLV_TAG_KEY_DATA            = 0x9C,
  APDU_TLV_TAG_SIGNATURE_DATA      = 0x9E
} TLV_TAG;

typedef enum _USAGE_QUALIFIER {
  APDU_USAGE_QUALIFIER_HASH              = 0x40,
  APDU_USAGE_QUALIFIER_INT_AUTH          = 0x40,
  APDU_USAGE_QUALIFIER_EXT_AUTH          = 0x80,
  APDU_USAGE_QUALIFIER_USER_AUTH         = 0x08,
  APDU_USAGE_QUALIFIER_SESSION_KEY_GEN   = 0x40,
  APDU_USAGE_QUALIFIER_MAC_CALC_VERIFY   = 0xC0,
  APDU_USAGE_QUALIFIER_SIGN_CALC         = 0x40,
  APDU_USAGE_QUALIFIER_SIGN_VERIFY       = 0x80,
  APDU_USAGE_QUALIFIER_ENCIPHER_DECIPHER = 0xC0,
  APDU_USAGE_QUALIFIER_DECIPHER          = 0x40

} USAGE_QUALIFIER;

typedef enum _DATA_TYPE {
  APDU_DATA_TYPE_ABSENT = 0x00,
  APDU_DATA_TYPE_PLAIN  = 0x80,
  APDU_DATA_TYPE_CIPHER = 0x86,
  APDU_DATA_TYPE_HASH   = 0x90,
  APDU_DATA_TYPE_DS_CHK = 0xA8
} DATA_TYPE;

typedef enum _DIGEST_PARAM_SET {
  CRYPTO_TEST_H_CODE  = 0x20,
  CRYPTO_PRO_H_CODE   = 0xA0,
  CRYPTO_TEST_C_CODE  = 0x00,
  CRYPTO_PRO_A_CODE   = 0x20,
  CRYPTO_PRO_B_CODE   = 0x30,
  CRYPTO_PRO_C_CODE   = 0x40
} DIGEST_PARAM_SET;

struct _APDU {
  APDU_TYPE Type;
  APDU_CLASS Cla;
  APDU_COMMAND Ins;
  UINT8 P1;
  UINT8 P2;
  UINT16 Lc;
  UINT16 Le;
  UINT8 *Data;
  UINTN DataLen;
  UINT8 *ResponseData;
  UINTN ResponseLen;

#pragma pack(1)
  union {
    struct {
      UINT8 Sw2; // Little endian
      UINT8 Sw1;
    } s;
    UINT16 Status;
  } u;
#pragma pack()

  UINTN  Flags;
  APDU_OCTET_STRING Binary;
};

typedef enum {
  SC_SUCCESS     = 0x9000,
  SC_AUTH_FAILED = 0x6300,
  SC_NO_MEMORY_CHAHGED = 0x6400,
  SC_MEMORY_WRITE_FAILURE = 0x6500,
  SC_MEMORY_FAILURE = 0x6581,
  SC_WRONG_BUFFER_LEN = 0x6700,
  SC_WAIT_NEXT_SEQUENCE = 0x6883,
  SC_WRONG_COMMAND_SEQUENCE = 0x6884,
  SC_NO_COMMAND_RIGHTS = 0x6982,
  SC_FILE_LOCKED = 0x6983,
  SC_WRONG_REFERENCE_DATA = 0x6984,
  SC_WRONG_CONDITIONS = 0x6985,
  SC_NO_CURRENT_EF = 0x6986,
  SC_COMMAND_NOW_NOT_ALLOWED = 0x6989,
  SC_KEY_NO_SUPPORT_OPERATION = 0x6994,
  SC_WRONG_ECP = 0x6996,
  SC_WRONG_DATA_INBUFFER = 0x6A80,
  SC_FUNCTION_NOT_SUPPORTED = 0x6A81,
  SC_FILE_NOT_FOUND = 0x6A82,
  SC_NO_MEMORY = 0x6A84,
  SC_WRONG_P1P2 = 0x6A86,
  SC_REFERENCE_DATA_NOT_FOUND = 0x6A88,
  SC_FILE_EXIST = 0x6A89,
  SC_OFFSET_OUT_OF_FILE_ = 0x6B00,
  SC_WRONG_OUTBUFFER_LENGTH = 0x6C00,
  SC_WRONG_COMMAND = 0x6D00,
  SC_RUTOKEN_WRONG_USB_PROTO = 0x6F01,
  SC_RUTOKEN_CRYPTO_ERROR = 0x6F10,
  SC_RUTOKEN_CRC_ERROR = 0x6F20,
  SC_RUTOKEN_PROTOCOL_FAILURE = 0x6F83,
  SC_RUTOKEN_BUSY = 0x6F84,
  SC_RUTOKEN_FOLDER_FULL = 0x6F85,
  SC_RUTOKEN_WRONG_RIGHTS = 0x6F86,
  SC_RUTOKEN_FILE_CRC_ERROR = 0x6F87,
  SC_RUTOKEN_TO_MANY_LOGINS = 0x6F88,
  SC_RUTOKEN_PIN_TO_SMALL = 0x6F89,
  SC_RUTOKEN_WAIT_FOR_DIFFERENT_ID = 0x6F90,
  SC_RUTOKEN_EKE_COUNTER_OVERFLOW = 0x6F91,
  SC_RUTOKEN_SIGN_COUNTER_OVERFLOW = 0x6F92,
} SC_STATUS;


typedef enum {
  ProtoT0  = 0x00000001,
  ProtoT1  = 0x00000002,
  ProtoRaw = 0x00001000,
  ProtoAny = 0xFFFFFFFF
} CARD_PROTO;

VOID
ApduBuild (
  IN     APDU         *Apdu,
  IN     APDU_TYPE    Type,
  IN     APDU_CLASS   Class,
  IN     APDU_COMMAND Command,
  IN     UINT8        P1,
  IN     UINT8        P2
  );

EFI_STATUS
ApduSetData (
  IN     APDU   *Apdu,
  IN     VOID   *Data,
  IN     UINT16 DataLen
  );

EFI_STATUS
ApduSetResData (
  IN     APDU   *Apdu,
  IN OUT VOID   *Result,
  IN     UINT16 ResultLength
  );

UINTN
ApduLength (
  IN     APDU CONST *Apdu,
  IN     CARD_PROTO Proto
  );

EFI_STATUS
Apdu2Buffer (
  IN     APDU CONST *Apdu,
  IN     CARD_PROTO Proto,
  IN     UINT8      *Buffer,
  IN OUT UINTN      *BufferLength
  );

#endif /* __APDU_H__ */
